#--------------------------通用配置-------------------------
spring:
  application:
    # 应用名
    name: novel
  profiles:
    # 激活特定配置
    active: dev
  jackson:
    generator:
      # JSON 序列化时，将所有 Number 类型的属性都转为 String 类型返回，避免前端数据精度丢失的问题。
      # 由于 Javascript 标准规定所有数字处理都应使用 64 位 IEEE 754 浮点值完成，
      # 结果是某些 64 位整数值无法准确表示（尾数只有 51 位宽）
      write-numbers-as-strings: true
  servlet:
    multipart:
      # 上传文件最大大小
      max-file-size: 5MB
server:
  # 端口号
  port: 8888
debug: true

# open-api
#springdoc:
#  swagger-ui:
#    path: /api/index.html



--- #---------------------数据库配置---------------------------
spring:
    datasource:
      url: jdbc:mysql://localhost:3306/novel?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
      username: root
      password: hd370304
#
  # ShardingSphere-JDBC 配置
  # 配置是 ShardingSphere-JDBC 中唯一与应用开发者交互的模块，
  # 通过它可以快速清晰的理解 ShardingSphere-JDBC 所提供的功能。
#  shardingsphere:
#    # 是否开启分库分表
#    enabled: false
#    props:
#      # 是否在日志中打印 SQL
#      sql-show: true
#    # 模式配置
#    mode:
#      # 单机模式
#      type: Standalone
#      repository:
#        # 文件持久化
#        type: File
#        props:
#          # 元数据存储路径
#          path: .shardingsphere
#      # 使用本地配置覆盖持久化配置
#      overwrite: true
#    # 数据源配置
#    datasource:
#      name: ds_0
#      ds_0:
#        type: com.zaxxer.hikari.HikariDataSource
##        type: com.alibaba.druid.pool.DruidDataSource
#        driverClassName: com.mysql.cj.jdbc.Driver
#        jdbcUrl: jdbc:mysql://localhost:3306/novel?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
#        username: root
#        password: hd370304

    # 规则配置
#    rules:
#      # 数据分片
#      sharding:
#        tables:
#          # book_content 表
#          book_content:
#            # 数据节点
#            actual-data-nodes: ds_$->{0}.book_content$->{0..9}
#            # 分表策略
#            table-strategy:
#              standard:
#                # 分片列名称
#                sharding-column: chapter_id
#                # 分片算法名称
#                sharding-algorithm-name: bookContentSharding
#
#        sharding-algorithms:
#          bookContentSharding:
#            # 行表达式分片算法，使用 Groovy 的表达式，提供对 SQL 语句中的 = 和 IN 的分片操作支持
#            type: INLINE
#            props:
#              # 分片算法的行表达式
#              algorithm-expression: book_content$->{chapter_id % 10}



# ShardingSphere-JDBC配置

#spring:
#  shardingsphere:
#    mode:
#      type: Standalone
#    datasource:
#      ds_0:
#        dataSourceClassName: com.zaxxer.hikari.HikariDataSource
#        driverClassName: com.mysql.cj.jdbc.Driver
#        jdbcUrl: jdbc:mysql://localhost:3306/novel?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
#        username: root
#        password: hd370304
#    shardingRule:
#      # 数据分片
#      tables:
#        # book_content 表
#        book_content:
#          # 数据节点
#          actualDataNodes: ds_$->{0}.book_content$->{0..9}
#          # 分表策略
#          tableStrategy:
#            standard:
#              # 分片列名称
#              sharding-column: chapter_id
#              # 分片算法名称
#              shardingAlgorithmName: bookContentSharding
#      shardingAlgorithms:
#        bookContentSharding:
#          # 行表达式分片算法，使用 Groovy 的表达式，提供对 SQL 语句中的 = 和 IN 的分片操作支持
#          type: INLINE
#          props:
#            # 分片算法的行表达式
#            algorithm-expression: book_content$->{chapter_id % 10}


#spring:
#  shardingsphere:
#    datasource:
#      names: m1 #逻辑数据源名称
#      m1:
#        type: com.alibaba.druid.pool.DruidDataSource
#        driver-class-name: com.mysql.cj.jdbc.Driver
#        url: jdbc:mysql://localhost:3306/novel?useUnicode=true&characterEncoding=utf-8
#        username: root
#        password: hd370304
#    rules:
#      sharding:
#        tables:
#          orders: #逻辑表
#            actual-data-nodes: m_$->{1}.book_content$->{0..9} #实际表db_1.orders_0,db_1orders_1
#            table-strategy:
#              standard:
#                sharding-column: chapter_id
#                sharding-algorithm-name: orders_inline #数据分片策略
#            key-generate-strategy:
##              column: id
##              key-generator-name: orders_key #主键生成策略，注sql中不能出现主键字段插入
##        key-generators:
##          orders_key:
##            type: SNOWFLAKE
##            props:
##              algorithm-expression: orders_$->{id % 2}
#        sharding-algorithms:
#          orders_inline:
#            type: INLINE
#            props:
#              algorithm-expression: book_content$->{chapter_id % 10}
#    props:
#      sql-show: true

#spring:
#  main:
#    allow-bean-definition-overriding: true
#  shardingsphere:
#    database:
#      name: ds # 逻辑库名称，默认值：logic_db
#    props:
#      sql-show: true
#    # 配置数据源
#    dataSource:
#      # 给每个数据源取别名，下面的ds0,ds1任意取名字
#      names: ds0
#      # 给master-ds0每个数据源配置数据库连接信息
#      ds0:
#        type: com.zaxxer.hikari.HikariDataSource
#        driver-class-name: com.mysql.cj.jdbc.Driver
#        url: jdbc:mysql://localhost:3306/novel?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
#        username: root
#        password: hd370304
#    rules:
#      sharding:
#        tables:
#          # db_user 逻辑表名
#          db_user:
#            # 数据节点：数据源$->{0..N}.逻辑表名$->{0..N}
#            actual-data-nodes: ds_$->{0}.book_content$->{0..9}
##            key-generate-strategy: # 分布式序列策略
##              column: id # 自增列名称，缺省表示不使用自增主键生成器
##              keygenerator-name: snowflake # 分布式序列算法名称
##            # 拆分库策略，也就是什么样子的数据放入放到哪个数据库中。
##            database-strategy:
##              standard:
##                sharding-column: age    # 分片字段（分片键）
##                sharding-algorithm-name: database-inline # 分片算法名称
#            # 拆分表策略，也就是什么样子的数据放入放到哪个数据表中。
#            table-strategy:
#              standard:
#                sharding-column: chapter_id    # 分片字段（分片键）
#                sharding-algorithm-name: table-inline # 分片算法名称
##        default-sharding-column: age # 默认分片列名称
##        default-database-strategy: # 默认数据库分片策略
##          standard:
##            sharding-column: age
##            sharding-algorithm-name: database-inline
#        default-table-strategy: # 默认表分片策略
#          standard:
#            sharding-column: age
#            sharding-algorithm-name: table-inline
##        binding-tables[0]:
##          db_user
#        sharding-algorithms:
##          database-inline:
##            type: INLINE  # 分片算法类型
##            props:
##              algorithm-expression: ds$->{age % 2} # 分片算法表达式
#          table-inline:
#            type: INLINE
#            props:
#              algorithm-expression: book_content$->{chapter_id % 10} # 分片算法表达式
#        key-generators:
#          snowflake:
#            type: SNOWFLAKE





--- #---------------------中间件配置---------------------------
spring:
  data:
    # Redis 配置
    redis:
      host: 127.0.0.1
      port: 6379
#      password: 123456

  # Elasticsearch 配置
#  elasticsearch:
    # 是否开启 Elasticsearch 搜索引擎功能：true-开启 false-不开启
#    enabled: true
#    uris:
#      - https://my-deployment-44daca.kb.us-central1.gcp.cloud.es.io:9243/
#    username: novel
#    password: hd370304!

  # Spring AMQP 配置
  amqp:
    # 是否开启 Spring AMQP：true-开启 false-不开启
    enabled: true
  # RabbitMQ 配置
  rabbitmq:
#    addresses: "amqp://guest:guest@47.106.243.172"
#    addresses: "amqp://guest:guest@10.56.116.210"
    port: 5672
    host: localhost
    username: guest
    password: guest
    virtual-host: /
    template:
      retry:
        # 开启重试
        enabled: true
        # 最大重试次数
        max-attempts: 3
        # 第一次和第二次重试之间的持续时间
        initial-interval: "3s"


# XXL-JOB 配置
xxl:
  job:
    # 是否开启 XXL-JOB：true-开启 false-不开启
    enabled: false
    admin:
      ### 调度中心部署根地址 [选填]：如调度中心集群部署存在多个地址则用逗号分隔。执行器将会使用该地址进行"执行器心跳注册"和"任务结果回调"；为空则关闭自动注册；
      addresses: http://localhost:8080/xxl-job-admin
    executor:
      ### 执行器AppName [选填]：执行器心跳注册分组依据；为空则关闭自动注册
      appname: xxl-job-executor-novel
      ### 执行器运行日志文件存储磁盘路径 [选填] ：需要对该路径拥有读写权限；为空则使用默认路径；
      logpath: logs/xxl-job/jobhandler
#      port: 9999
    ### xxl-job, access token
#    accessToken: 123

--- #----------------------安全配置----------------------------
spring:
  # Spring Boot 应用管理和监控
  boot:
    admin:
      client:
        # 是否开启 Spring Boot Admin 客户端
        enabled: false
        # Spring Boot Admin 服务端注册地址
        url: http://localhost:8080
        # Spring Boot Admin 服务端认证用户名
        username: novel
        # Spring Boot Admin 服务端认证密码
        password: novel
        instance:
          metadata:
            # SBA Client
            user.name: ${spring.security.user.name}
            user.password: ${spring.security.user.password}
  security:
    user:
      name: ENDPOINT_ADMIN
      password: ENDPOINT_ADMIN
      roles: ENDPOINT_ADMIN

# Actuator 端点管理
management:
  # 端点公开配置
  endpoints:
    # 通过 HTTP 公开的 Web 端点
    web:
      exposure:
        # 公开所有的 Web 端点
        include: "*"
  # 端点启用配置
  endpoint:
    logfile:
      # 启用返回日志文件内容的端点
      enabled: true
      # 外部日志文件路径
      external-file: logs/novel.log
  info:
    env:
      # 公开所有以 info. 开头的环境属性
      enabled: true
  health:
    rabbit:
      # 关闭 rabbitmq 的健康检查
      enabled: false
    elasticsearch:
      # 关闭 elasticsearch 的健康检查
      enabled: false

--- #--------------------接口文档配置---------------------------
springdoc:
  api-docs:
    enabled: false

--- #---------------------自定义配置----------------------------
novel:
  # 跨域配置
  cors:
    # 允许跨域的域名
    allow-origins:
      - http://localhost:1024
      - http://localhost:8080
  # JWT密钥
  jwt:
    secret: E66559580A1ADF48CDD928516062F12E

  # XSS 过滤配置
  xss:
    # 过滤开关
    enabled: false
    # 排除链接
    excludes:
      - /system/notice/*
  file:
    # 文件上传配置
    upload:
      # 上传路径
      path: D:\Projects\IdeaProjects\novel-master\image


--- #------------------- dev 特定配置---------------------------
spring:
  config:
    activate:
      on-profile: dev
springdoc:
  api-docs:
    enabled: true

--- #------------------- test 特定配置--------------------------
spring:
  config:
    activate:
      on-profile: test

--- #-------------------- prod 特定配置-------------------------
spring:
  config:
    activate:
      on-profile: prod
  data:
     # Redis 配置
    redis:
      host: 101.42.249.14
      port: 6379
#      password: 123456

